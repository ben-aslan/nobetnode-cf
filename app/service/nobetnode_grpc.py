# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: nobetnode.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import app.service.nobetnode_pb2


class NobetServiceBase(abc.ABC):

    @abc.abstractmethod
    async def BanUser(self, stream: 'grpclib.server.Stream[app.service.nobetnode_pb2.User, app.service.nobetnode_pb2.Result]') -> None:
        pass

    @abc.abstractmethod
    async def UnBanUser(self, stream: 'grpclib.server.Stream[app.service.nobetnode_pb2.User, app.service.nobetnode_pb2.Result]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/nobetnode.NobetService/BanUser': grpclib.const.Handler(
                self.BanUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                app.service.nobetnode_pb2.User,
                app.service.nobetnode_pb2.Result,
            ),
            '/nobetnode.NobetService/UnBanUser': grpclib.const.Handler(
                self.UnBanUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                app.service.nobetnode_pb2.User,
                app.service.nobetnode_pb2.Result,
            ),
        }


class NobetServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.BanUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nobetnode.NobetService/BanUser',
            app.service.nobetnode_pb2.User,
            app.service.nobetnode_pb2.Result,
        )
        self.UnBanUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nobetnode.NobetService/UnBanUser',
            app.service.nobetnode_pb2.User,
            app.service.nobetnode_pb2.Result,
        )
